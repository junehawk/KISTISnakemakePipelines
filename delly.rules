import os,sys

#get path to reference genome file with name of 'ref'
def _get_ref(wildcards):
    return config["references"][wildcards.ref]

def _delly_get_bcfs(wildcards):
    SAMPLE, = glob_wildcards("fastq/{sample,[^./]+}_1.fastq.gz")
    return sorted(expand(
            "sv_calling/{ref}/{alg}/delly/{sample}.{processed}_{sv_type}_{stage}.bcf",
            sample=SAMPLE,
            ref=wildcards.ref,
            alg=wildcards.alg,
            processed=wildcards.processed,
            sv_type=wildcards.sv_type,
            stage=wildcards.stage))

def _delly_get_csis(wildcards):
    SAMPLE, = glob_wildcards("fastq/{sample,[^./]+}_1.fastq.gz")
    return sorted(expand(
            "sv_calling/{ref}/{alg}/delly/{sample}.{processed}_{sv_type}_{stage}.bcf.csi",
            sample=SAMPLE,
            ref=wildcards.ref,
            alg=wildcards.alg,
            processed=wildcards.processed,
            sv_type=wildcards.sv_type,
            stage=wildcards.stage))

rule delly_call_by_sample:
    input:
        reference=_get_ref,
        bam="mapping/{ref}/{alg}/{project}-{disease}-{id}-{sample}-{method}-{platform}.{processed}.bam"
    output:
        bcf="sv_calling/{ref}/{alg}/delly/{project}-{disease}-{id}-{sample}-{method}-{platform}.{processed}_{sv_type}_first.bcf",
        csi="sv_calling/{ref}/{alg}/delly/{project}-{disease}-{id}-{sample}-{method}-{platform}.{processed}_{sv_type}_first.bcf.csi"
    threads: 4
    shell:
        "{config[tools][delly]} call -t {wildcards.sv_type} -g {input.reference} -o {output.bcf} -x {config[db][delly_excl]} {input.bam}"

rule delly_merge_call_by_sample:
    input:
        bcfs=_delly_get_bcfs
    output:
        bcf="sv_calling/{ref}/{alg}/delly/merged.{processed}_{sv_type}_{stage}.bcf",
        csi="sv_calling/{ref}/{alg}/delly/merged.{processed}_{sv_type}_{stage}.bcf.csi"
    shell:
        "{config[tools][delly]} merge -t {wildcards.sv_type} -m 500 -n 1000000 -o {output.bcf} -b 500 -r 0.5 {input.bcfs}"


rule delly_regenotype:
    input:
        reference=_get_ref,
        bam="mapping/{ref}/{alg}/{project}-{disease}-{id}-{sample}-{method}-{platform}.{processed}.bam",
        bcf="sv_calling/{ref}/{alg}/delly/merged.{processed}_{sv_type}_first.bcf"
    output:
        bcf="sv_calling/{ref}/{alg}/delly/{project}-{disease}-{id}-{sample}-{method}-{platform,[^.]+}.{processed}_{sv_type}_final.bcf"
    shell:
        "{config[tools][delly]} call -t  {wildcards.sv_type} -g {input.reference} -v {input.bcf} "
        "-o {output.bcf} -x {config[db][delly_excl]} {input.bam}"

rule delly_merge_regenotyped:
    input:
        bcfs=_delly_get_bcfs,
        csis=_delly_get_csis,
    output:
        "sv_calling/{ref}/{alg}/delly/all.{processed}_{sv_type}_germline_{stage}.bcf"
    shell:
        "/cluster/ngs/delly/src/bcftools/bcftools merge -O b -o {output} {input.bcfs}"

rule delly_germline_filter:
    input:
        reference=_get_ref,
        bcf="sv_calling/{ref}/{alg}/delly/all.{processed}_{sv_type}_germline_final.bcf",
        csi="sv_calling/{ref}/{alg}/delly/all.{processed}_{sv_type}_germline_final.bcf.csi"
    output:
        "sv_calling/{ref}/{alg}/delly/all.{processed}_{sv_type}_germline_final_filtered.bcf"
    shell:
        "{config[tools][delly]} filter -t {wildcards.sv_type} -f germline -o {output} -g {input.reference} {input.bcf}"


rule bcf_index:
    input: "{prefix}.bcf"
    output: "{prefix}.bcf.csi"
    shell: "/cluster/ngs/delly/src/bcftools/bcftools index {input}"
